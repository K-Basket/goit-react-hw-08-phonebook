// üíôüíõ
import { createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

// resource backend -- https://connections-api.herokuapp.com/docs/#/

axios.defaults.baseURL = 'https://connections-api.herokuapp.com/'; // —Å—Ç–∞–≤–∏–º –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –±–∞–∑–æ–≤—ã URL

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö –Ω–∞ backend.
const setAuthHeader = token => {
  axios.defaults.headers.common.Authorization = `Bearer ${token}`;
};

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è de–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞).
const clearAuthHeader = () => {
  axios.defaults.headers.common.Authorization = '';
};

// credentials (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—Ö–æ–¥–∞) -- —Å—é–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ input
export const registerThunk = createAsyncThunk(
  'auth/register',
  async (credentials, thunkAPI) => {
    try {
      const { data } = await axios.post('/users/signup', credentials);
      setAuthHeader(data.token);
      return data;
    } catch (error) {
      return thunkAPI.rejectWithValue(error.message);
    }
  }
);

export const loginThunk = createAsyncThunk(
  'auth/login',
  async (credentials, thunkAPI) => {
    try {
      const { data } = await axios.post('/users/login', credentials);
      setAuthHeader(data.token);
      return data;
    } catch (error) {
      return thunkAPI.rejectWithValue(error.message);
    }
  }
);

export const logoutThunk = createAsyncThunk(
  'auth/logout',
  async (_, thunkAPI) => {
    try {
      await axios.post('/users/logout');
      clearAuthHeader(); // –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–∏–Ω–∞ –Ω–∞ –±–µ–∫–µ–Ω–¥–µ
    } catch (error) {
      return thunkAPI.rejectWithValue(error.message);
    }
  }
);
// –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–µ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞—Ç—å—Å—è
export const refreshUserThunk = createAsyncThunk(
  'auth/refresh',
  async (_, thunkAPI) => {
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ redux state (—Ç.–µ. –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ª–æ–≥–∏–Ω–µ–Ω user –∏–ª–∏ –Ω–µ—Ç)
    const state = thunkAPI.getState(); // –ø–æ–ª—É—á–µ–º –≤–µ—Å—å state –∏–∑ Redux (thunkAPI –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å)
    const token = state.auth.token; // –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –∑–∞–ø–∏—Å—å --> /const { token } = thunkAPI.getState().auth;/
    if (!token) {
      return thunkAPI.rejectWithValue('No valid token');
    } // –µ—Å–ª–∏ user –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω,—Ç–æ–≥–¥–∞ –≤—ã–π—Ç–∏

    try {
      setAuthHeader(token); // –µ—Å–ª–∏ user –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∫ http-–∑–∞–ø—Ä–æ—Å—É
      const { data } = await axios.get('/users/current'); // http-–∑–∞–ø—Ä–æ—Å –Ω–∞ refreshUser
      return data;
    } catch (error) {
      return thunkAPI.rejectWithValue(error.message);
    }
  }
);
